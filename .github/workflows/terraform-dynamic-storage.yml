name: "Terraform Apply / Destroy (Dynamic Backend)"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Select Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform-resources

    steps:
      # ----------------------------
      # 1Ô∏è‚É£ Checkout the repo
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------
      # 2Ô∏è‚É£ Authenticate to Azure using OIDC
      # ----------------------------
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ----------------------------
      # 3Ô∏è‚É£ Setup Terraform
      # ----------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # ----------------------------
      # 4Ô∏è‚É£ Initialize local backend (bootstrap)
      # ----------------------------
      - name: Terraform Init (Bootstrap Local Backend)
        run: |
          echo "Bootstrapping Terraform with local backend..."
          rm -f backend-azurerm.tf   # ensure only local backend exists
          terraform init -reconfigure

      # ----------------------------
      # 5Ô∏è‚É£ Check if backend already exists in Azure
      # ----------------------------
      - name: Check Backend Existence
        id: check_backend
        run: |
          echo "üîç Checking for existing backend resources..."
          set +e
          RG_EXISTS=$(az group exists --name "${{ secrets.TF_BACKEND_RG }}" 2>/dev/null)
          SA_EXISTS=$(az storage account show \
            --name "${{ secrets.TF_BACKEND_SA }}" \
            --resource-group "${{ secrets.TF_BACKEND_RG }}" \
            --query "name" -o tsv 2>/dev/null)
          set -e

          if [ "$RG_EXISTS" = "true" ] && [ -n "$SA_EXISTS" ]; then
            echo "‚úÖ Backend already exists ‚Äî skipping creation."
            echo "backend_exists=true" >> $GITHUB_ENV
          else
            echo "üÜï Backend not found ‚Äî creating..."
            echo "backend_exists=false" >> $GITHUB_ENV
          fi

      # ----------------------------
      # 6Ô∏è‚É£ Create backend (only if needed)
      # ----------------------------
      - name: Terraform Apply (Create Backend Storage)
        if: env.backend_exists == 'false'
        run: |
          terraform apply -auto-approve \
            -target=azurerm_resource_group.backend_rg \
            -target=azurerm_storage_account.backend_sa \
            -target=azurerm_storage_container.backend_container

      # ----------------------------
      # 7Ô∏è‚É£ Switch to azurerm backend
      # ----------------------------
      - name: Switch to Remote Backend
        run: |
          echo "Switching from local to azurerm backend..."
          mv backend-azurerm.tf backend.tf
          rm -f backend-bootstrap.tf
          terraform init -reconfigure \
            -backend-config="resource_group_name=${{ secrets.TF_BACKEND_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_BACKEND_SA }}" \
            -backend-config="container_name=${{ secrets.TF_BACKEND_CONTAINER }}" \
            -backend-config="key=terraform.tfstate"
            
      # ----------------------------
      # 8Ô∏è‚É£ Switch from local backend ‚Üí remote azurerm backend
      # ----------------------------
      - name: Switch to Remote Backend
        run: |
          echo "Switching backend configuration to azurerm..."
          mv _backend.tf backend.tf || echo "No _backend.tf file found (already set up)"
          rm -f backend-bootstrap.tf
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_BACKEND_RG}" \
            -backend-config="storage_account_name=${TF_BACKEND_SA}" \
            -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
            -backend-config="key=terraform.tfstate"

      # ----------------------------
      # 9Ô∏è‚É£ Validate Terraform code
      # ----------------------------
      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      # ----------------------------
      # üîü Terraform Plan and Apply / Destroy
      # ----------------------------
      - name: Terraform Plan and Apply/Destroy
        run: |
          case "${{ github.event.inputs.action }}" in
            apply)
              echo "üöÄ Running terraform plan and apply..."
              terraform plan -out=tfplan
              terraform apply -auto-approve tfplan
              ;;
            destroy)
              echo "üî• Running terraform destroy..."
              terraform plan -destroy -out=tfplan
              terraform apply -auto-approve tfplan
              ;;
            *)
              echo "‚ùå Invalid action specified"
              exit 1
              ;;
          esac
