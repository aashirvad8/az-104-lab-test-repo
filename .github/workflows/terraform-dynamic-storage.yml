name: "Terraform Dynamic Backend - Apply or Destroy Infra"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Select Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform-resources

    steps:
      # ----------------------------
      # 1Ô∏è‚É£ Checkout the repository
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------
      # 2Ô∏è‚É£ Authenticate with Azure
      # ----------------------------
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # ----------------------------
      # 3Ô∏è‚É£ Setup Terraform
      # ----------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # ----------------------------
      # 4Ô∏è‚É£ Initialize Terraform locally (bootstrap backend)
      # ----------------------------
      - name: Terraform Init (Bootstrap Local Backend)
        run: terraform init -backend-config="path=terraform.tfstate" -reconfigure

      # ----------------------------
      # 5Ô∏è‚É£ Check if backend already exists in Azure
      # ----------------------------
      - name: Check Backend Existence
        id: check_backend
        run: |
          echo "üîç Checking for existing backend resources..."
          set +e
          RG_EXISTS=$(az group exists --name "${{ secrets.TF_BACKEND_RG }}" 2>/dev/null)
          SA_EXISTS=$(az storage account show --name "${{ secrets.TF_BACKEND_SA }}" --resource-group "${{ secrets.TF_BACKEND_RG }}" --query "name" -o tsv 2>/dev/null)
          set -e

          if [ "$RG_EXISTS" = "true" ] && [ -n "$SA_EXISTS" ]; then
            echo "‚úÖ Backend already exists ‚Äî skipping backend creation."
            echo "backend_exists=true" >> $GITHUB_ENV
          else
            echo "üÜï Backend not found ‚Äî will create a new one."
            echo "backend_exists=false" >> $GITHUB_ENV
          fi

      # ----------------------------
      # 6Ô∏è‚É£ Conditionally create backend resources
      # ----------------------------
      - name: Terraform Apply (Create Backend Storage)
        if: env.backend_exists == 'false'
        run: |
          terraform apply -auto-approve \
            -target=azurerm_resource_group.backend_rg \
            -target=azurerm_storage_account.backend_sa \
            -target=azurerm_storage_container.backend_container

      # ----------------------------
      # 7Ô∏è‚É£ Capture backend info for reconfiguration
      # ----------------------------
      - name: Capture Backend Outputs
        id: backend
        run: |
          echo "TF_BACKEND_RG=${{ secrets.TF_BACKEND_RG }}" >> $GITHUB_ENV
          echo "TF_BACKEND_SA=${{ secrets.TF_BACKEND_SA }}" >> $GITHUB_ENV
          echo "TF_BACKEND_CONTAINER=${{ secrets.TF_BACKEND_CONTAINER }}" >> $GITHUB_ENV

      # ----------------------------
      # 8Ô∏è‚É£ Reinitialize Terraform with remote backend
      # ----------------------------
      - name: Terraform Init (Remote Backend)
        run: |
          echo "Reinitializing Terraform with remote Azure backend..."
          rm -f backend-bootstrap.tf
          terraform init -reconfigure \
            -backend-config="resource_group_name=${TF_BACKEND_RG}" \
            -backend-config="storage_account_name=${TF_BACKEND_SA}" \
            -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
            -backend-config="key=terraform.tfstate"


      # ----------------------------
      # 9Ô∏è‚É£ Terraform Plan and Apply/Destroy logic
      # ----------------------------
      - name: Terraform Plan and Apply/Destroy
        run: |
          ACTION="${{ github.event.inputs.action }}"
          if [ "$ACTION" = "apply" ]; then
            echo "Planning Terraform apply..."
            terraform plan -out=tfplan
            echo "Applying Terraform configuration..."
            terraform apply -auto-approve tfplan
          elif [ "$ACTION" = "destroy" ]; then
            echo "Planning Terraform destroy..."
            terraform plan -destroy -out=tfplan
            echo "Destroying Terraform-managed resources..."
            terraform apply -auto-approve tfplan
          else
            echo "Invalid action: $ACTION"
            exit 1
          fi

      # ----------------------------
      # üîü Upload Terraform Plan for review (optional)
      # ----------------------------
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ./terraform-resources/tfplan

      # ----------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Cleanup local bootstrap state (optional)
      # ----------------------------
      - name: Cleanup Local Bootstrap State
        if: always()
        run: rm -f terraform.tfstate terraform.tfstate.backup
