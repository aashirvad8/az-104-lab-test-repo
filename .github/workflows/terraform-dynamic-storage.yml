name: "Terraform Apply / Destroy with Dynamic Backend"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Select Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    name: "Terraform Action"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform-resources

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Prepare Terraform Backend
        run: |
          BACKEND_RG="tfstate-rg"
          BACKEND_STORAGE="tfstate${{ github.run_id }}"
          BACKEND_CONTAINER="tfstate"
          LOCATION="eastus2"

          # Create RG if it doesn't exist
          az group create --name $BACKEND_RG --location $LOCATION

          # Create Storage Account if not exists
          az storage account create \
            --name $BACKEND_STORAGE \
            --resource-group $BACKEND_RG \
            --location $LOCATION \
            --sku Standard_LRS \
            --kind StorageV2 \
            --encryption-services blob || echo "Storage account exists"

          # Get Storage Account Key
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $BACKEND_RG \
            --account-name $BACKEND_STORAGE \
            --query "[0].value" -o tsv)

          # Create container if not exists
          az storage container create \
            --name $BACKEND_CONTAINER \
            --account-name $BACKEND_STORAGE \
            --account-key $ACCOUNT_KEY || echo "Container exists"

          # Write dynamic backend.tf
          cat > backend.tf <<EOL
          terraform {
            backend "azurerm" {
              resource_group_name  = "$BACKEND_RG"
              storage_account_name = "$BACKEND_STORAGE"
              container_name       = "$BACKEND_CONTAINER"
              key                  = "terraform.tfstate"
            }
          }
          EOL

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan / Apply / Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            echo "✅ Applying Terraform..."
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            echo "⚠️ Destroying Terraform resources..."
            terraform plan -destroy -out=tfplan
            terraform destroy -auto-approve
          else
            echo "❌ Invalid action selected: ${{ github.event.inputs.action }}"
            exit 1
          fi
