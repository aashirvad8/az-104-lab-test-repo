name: "Terraform Apply / Destroy"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Select Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

env:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_IN_AUTOMATION: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform-resources

    steps:
      - uses: actions/checkout@v4

      - uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # Step 1: Bootstrap apply to create backend
      - name: Terraform Init (Bootstrap Local Backend)
        run: terraform init

      - name: Terraform Apply Backend Storage
        run: terraform apply -auto-approve \
          -var="backend_rg_name=tfstate-rg" \
          -var="backend_sa_name=tfstatejayesh4890patil1" \
          -var="backend_container_name=tfstate"

      # Step 2: Re-init with Remote Backend
      - name: Terraform Init (Remote Backend)
        run: |
          cat > backend.tf <<EOL
            terraform {
            backend "azurerm" {
            resource_group_name  = "tfstate-rg"
            storage_account_name = "tfstatejayesh4890patil1"
            container_name       = "tfstate"
            key                  = "terraform.tfstate"
                            }
                    }
                EOL
          terraform init -reconfigure

      - name: Terraform Validate (only apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform validate

      - name: Terraform Plan / Apply / Destroy
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform plan -out=tfplan
            terraform apply -auto-approve tfplan
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform plan -destroy -out=tfplan
            terraform destroy -auto-approve
          else
            echo "Invalid action"
            exit 1
          fi
