name: "Terraform Azure Deployment (OIDC)"

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

      backend_rg:
        description: "Resource group for Terraform state backend"
        required: true
        default: "tfstate-rg"

      backend_storage_account:
        description: "Storage account for Terraform state backend"
        required: true
        default: "tfstatejayesh4890patil1"

      backend_container:
        description: "Blob container for Terraform state backend"
        required: true
        default: "tfstate"

      backend_key:
        description: "State file name (key)"
        required: true
        default: "terraform.tfstate"

permissions:
  id-token: write   # For OIDC authentication
  contents: read

env:
  TF_WORKING_DIR: ./terraform-resources

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: "Terraform Plan & Deploy"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Azure Login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init (dynamic backend)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ github.event.inputs.backend_rg }}" \
            -backend-config="storage_account_name=${{ github.event.inputs.backend_storage_account }}" \
            -backend-config="container_name=${{ github.event.inputs.backend_container }}" \
            -backend-config="key=${{ github.event.inputs.backend_key }}"

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -auto-approve
