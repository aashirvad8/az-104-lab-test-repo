name: "Terraform - Azure VM Deployment (OIDC + Preflight + Artifacts)"

on:
  # Manual trigger with input for apply or destroy
  workflow_dispatch:
    inputs:
      action:
        description: "Select Terraform action to perform"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

env:
  TF_WORKING_DIR: ./terraform-resources

jobs:
  terraform:
    name: "Terraform ${{ github.event.inputs.action }}"
    runs-on: ubuntu-latest

    permissions:
      id-token: write   # required for OIDC authentication
      contents: read

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Preflight validation - ensure secrets exist
      - name: Validate Required Secrets
        run: |
          echo "üîç Checking required environment variables..."
          missing=""
          for secret in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [ -z "${{ secrets[$secret] }}" ]; then
              echo "‚ùå Missing secret: $secret"
              missing="yes"
            else
              echo "‚úÖ Found secret: $secret"
            fi
          done

          if [ "$missing" = "yes" ]; then
            echo "‚õî One or more required secrets are missing. Please add them under repository settings ‚Üí Secrets and variables ‚Üí Actions."
            exit 1
          fi
          echo "‚úÖ All required secrets are present."

      # Step 3: Verify OIDC Token permissions
      - name: Validate OIDC Token Availability
        env:
          ACTIONS_ID_TOKEN_REQUEST_URL: ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL }}
          ACTIONS_ID_TOKEN_REQUEST_TOKEN: ${{ env.ACTIONS_ID_TOKEN_REQUEST_TOKEN }}
        run: |
          echo "üîë Checking if GitHub OIDC token can be requested..."
          if [ -z "$ACTIONS_ID_TOKEN_REQUEST_URL" ]; then
            echo "‚ùå OIDC token request URL not found. Check 'permissions: id-token: write' in your workflow."
            exit 1
          fi
          echo "‚úÖ OIDC permissions confirmed."

      # Step 4: Azure Login via OIDC
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step 5: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5  # Adjust if needed

      # Step 6: Terraform Init
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      # Step 7: Terraform Validate
      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # Step 8: Terraform Plan
      - name: Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -input=false -out=tfplan | tee terraform_plan.log

      # Step 9: Upload Terraform Plan & Logs as Artifacts
      - name: Upload Terraform Plan and Logs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.event.inputs.action }}
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan
            ${{ env.TF_WORKING_DIR }}/terraform_plan.log
          if-no-files-found: warn

      # Step 10: Terraform Apply (conditional)
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "üöÄ Applying Terraform plan..."
          terraform apply -auto-approve tfplan | tee terraform_apply.log

      # Step 11: Terraform Destroy (conditional)
      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "üí£ Destroying Terraform-managed resources..."
          terraform destroy -auto-approve | tee terraform_destroy.log

      # Step 12: Upload Apply/Destroy Logs (optional but useful)
      - name: Upload Apply/Destroy Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-${{ github.event.inputs.action }}-logs
          path: |
            ${{ env.TF_WORKING_DIR }}/terraform_apply.log
            ${{ env.TF_WORKING_DIR }}/terraform_destroy.log
          if-no-files-found: ignore
